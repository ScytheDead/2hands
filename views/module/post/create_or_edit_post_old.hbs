<link rel="stylesheet" href="../css/style.css">
{{!-- <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.1.0/css/all.css"> --}}
<script src="../js/connectAPI.js"></script>
<script src="../js/handle.js"></script>
<script id="importSocket" src="/socket.io/socket.io.js"></script>

<script>
    if (sessionStorage.getItem('token') == null) {
        window.location.href = Dia_chi_Dich_vu
    }
</script>

<div class="container mt-3">
    <div class="row">
        <div class="col-md-12">
            <h1 id="formTitleId" class="text-info"></h1>
        </div>

        <div id="errorMessageId"></div>

        <div class="col-md-9">

            <div class="form-group">
                <label>Tiêu đề <i class="fa fa-empire text-danger" aria-hidden="true"></i>: </label>
                <input class="form-control" required="required" id="titleId" value="">
            </div>

            <div class="form-group">
                <label>Chuyên mục: </label>&nbsp
                <select id="filterCategoryId" class="btn btn-outline-secondary">

                </select>
            </div>

            <div class="form-group">
                <label>Thể loại: </label>&nbsp
                <select id="filterClassifyId" class="btn btn-outline-primary">

                </select>
            </div>

            <div class="form-group">
                <label>Nhà sản xuất: </label>&nbsp
                <select id="filterProducerId" class="btn btn-outline-success">

                </select>
            </div>

            <div class="form-group">
                <label id="createdAtId"></label>
            </div>

            <div class="form-group">
                <label id="updatedAtId"></label>
            </div>

            <div class="form-group">
                Loại tin:
                <label class="form-check-label ml-5">
                    <input type="radio" id="rdoSellerId" class="form-check-input" value="1" checked name="optradio">Cần
                    bán
                </label>
                <label class="form-check-label ml-5">
                    <input type="radio" id="rdoBuyerId" class="form-check-input" value="0" name="optradio">Cần mua
                </label>
            </div>

            <div class="form-group">
                <label>Miêu tả chi tiết <i class="fa fa-empire text-danger" aria-hidden="true"></i>: </label>
                <textarea class="form-control" rows="5" cols="50" id="contentId"></textarea>
            </div>

            <div class="form-group">
                <label for="priceId">Giá <i class="fa fa-empire text-danger" aria-hidden="true"></i>: </label>
                <input type="text" class="form-control" maxlength="11" required="required" id="priceId"
                    aria-describedby="helpId" placeholder="Nhập giá bán">
            </div>

            <div class="form-group">
                <label for="addressId">Địa chỉ <i class="fa fa-empire text-danger" aria-hidden="true"></i>: </label>
                <input type="text" class="form-control" required="required" id="addressId" aria-describedby="helpId"
                    placeholder="Địa chỉ của bạn">
            </div>

            <div class="form-group">
                <label>Hình ảnh (Dung lượng nhỏ hơn 1.5 MB mỗi hình) <i class="fa fa-empire text-danger"
                        aria-hidden="true"></i>: </label>
                <div class="row" style="margin-left: 0">
                    <div id="ImagesId">
                        <button id="addImageId" class="btn btn-outline-warning btn-lg">
                            <i class="fa fa-camera fa-4x"></i>
                            <i style="position: absolute; right: 733px; top: 708px;">+</i>
                        </button>
                    </div>

                    <div style="position: absolute; right: 500px; top: 713px;">
                        <i class="fa fa-hand-o-left"></i>
                        <em>Bạn cần đăng ít nhất 1 hình</em>
                    </div>
                </div>

                <div class="form-group mt-5" id="showImageSelectedId">

                </div>

                <input class="btn btn-outline-primary d-none" type="file" id="uploadImage" accept="image/*" multiple>

            </div>

            <!-- Nút Xác nhận Lưu, Hủy -->
            <button class="btn btn-success font-weight-bold" id="luu">Lưu</button>
            <button class="btn btn-outline-danger ml-3" id="huy">Hủy</button><br>
        </div>

        <div class="col-md-12 mt-5">
            <i class="fa fa-empire text-danger" aria-hidden="true"></i>: Là các nội dung không được để trống
        </div>


    </div>
</div>

<!-- Button trigger modal -->
<button id="modalUploadId" type="button" class="btn btn-primary btn-lg d-none" data-toggle="modal"
    data-target="#modelId">
    Launch
</button>

<!-- Modal -->
<div class="modal fade" id="modelId" tabindex="-1" role="dialog" aria-labelledby="modelTitleId" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cập nhật hình ảnh</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <label>Hình ảnh: </label>
                <img id="imageModalId" width="100" height="100">
                <input class="btn btn-outline-warning mt-3" type="file" id="uploadId" name="image">

                <div class="modal-footer mt-3">
                    <button id="btnCloseModalUpload" class="btn btn-outline-danger" data-dismiss="modal">Đóng</button>
                    <button class="btn btn-success" id="btnUpload">Cập nhật</button>
                </div>

            </div>
        </div>
    </div>
</div>
<script>
    var socket = io(Dia_chi_Dich_vu);

    TH_avatar.src = '../images/login_icon2.png';
    var listImageSelected = [];

    addImageId.onclick = () => {
        uploadImage.click();
    }

    uploadImage.onchange = async () => {
        var maxImageShow;
        if (uploadImage.files.length > 0) {
            listImageSelected = [];
        }

        if (uploadImage.files.length > 6) {
            modalNotificationError(`Bạn chỉ được đăng tối đa 6 ảnh`);
            maxImageShow = 6;
        } else {
            maxImageShow = uploadImage.files.length;
        }

        for (var i = 0; i < maxImageShow; i++) {
            listImageSelected.push(uploadImage.files[i]);
        }
        showImageSelect(listImageSelected);
    }


    filterCategoryId.onchange = async () => {
        await getClassifiesByCategory(filterCategoryId.value);
        getProducersByClassify(filterClassifyId.value);
    }

    filterClassifyId.onchange = async () => {
        getProducersByClassify(filterClassifyId.value);
    }

    if (1) {  // Create
        formTitleId.innerHTML = `ĐĂNG TIN MỚI`;
        createdAtId.innerHTML = 'Ngày tạo: ' + getDateFormat(new Date());
        updatedAtId.classList.add('d-none')

        loadAllData();
        async function loadAllData() {
            await getAllCategory();     //load all Categories
            await getClassifiesByCategory(filterCategoryId.value); // load Classifies by category
            getProducersByClassify(filterClassifyId.value);     //load producer by classify
        }

        luu.onclick = () => {
            hiddenMessageError();
            getListBase64(listImageSelected)
                .then(listBase64 => {
                    var token = sessionStorage.getItem('token');
                    var infoPostCreate = {
                        user: decodedJWT(token).id,
                        category: filterCategoryId.value,
                        classify: filterClassifyId.value,
                        producer: filterProducerId.value,
                        title: titleId.value,
                        content: contentId.value,
                        price: priceId.value,
                        address: addressId.value,
                        images: listBase64,
                        seller: rdoSellerId.checked == true ? true : false
                    }
                    createPostAPI(token, infoPostCreate)
                        .then(result => {
                            showMessageSuccess(`Đăng tin mới thành công.<br>Tin của bạn đang được kiểm duyệt`)
                            console.log(result);
                            socket.emit('client-create-post', result.createdPost)
                        })
                        .catch(err => {
                            var chuoi_error = ``;
                            console.log(JSON.parse(err));
                            if (JSON.parse(err).message != undefined) {
                                if (JSON.parse(err).message == `The title already exists`) {
                                    chuoi_error = `Tiêu đề này đã tồn tại.<br>Xin chọn tiêu đề khác.`
                                } else if (JSON.parse(err).message == `pictures too much or too little`) {
                                    chuoi_error = `Phải chọn ít nhất 1 ảnh và tối đa 6 ảnh.`
                                }

                            } else if (JSON.parse(err).error.errors != undefined) {
                                if (JSON.parse(err).error.errors.title != undefined) {
                                    if (JSON.parse(err).error.errors.title.message == 'title too short') {
                                        chuoi_error += 'Tiêu đề quá ngắn. (Tiêu đề từ 5 đến 255 ký tự) <br>';
                                    } else if (JSON.parse(err).error.errors.title.message == 'title too long') {
                                        chuoi_error += 'Tiêu đề quá dài. (Tiêu đề từ 5 đến 255 ký tự)<br>';
                                    } else if (JSON.parse(err).error.errors.title.message == 'Path `title` is required.') {
                                        chuoi_error += 'Tiêu đề không được để trống.<br>';
                                    }
                                }

                                if (JSON.parse(err).error.errors.content != undefined) {
                                    if (JSON.parse(err).error.errors.content.message == 'content too short') {
                                        chuoi_error += 'Mô tả chi tiết quá ngắn. (Mô tả chi tiết từ 20 đến 5000 ký tự)<br>';
                                    } else if (JSON.parse(err).error.errors.content.message == 'content too long') {
                                        chuoi_error += 'Mô tả chi tiết quá dài. (Mô tả chi tiết từ 20 đến 5000 ký tự)<br>';
                                    } else if (JSON.parse(err).error.errors.content.message == 'Path `content` is required.') {
                                        chuoi_error += 'Mô tả chi tiết không được để trống.<br>';
                                    }
                                }

                                if (JSON.parse(err).error.errors.address != undefined) {
                                    if (JSON.parse(err).error.errors.address.message == 'address too short') {
                                        chuoi_error += 'Địa chỉ quá ngắn. (Địa chỉ từ 20 đến 255 ký tự)<br>';
                                    } else if (JSON.parse(err).error.errors.address.message == 'address too long') {
                                        chuoi_error += 'Địa chỉ quá dài. (Địa chỉ từ 20 đến 255 ký tự)<br>';
                                    } else if (JSON.parse(err).error.errors.address.message == 'Path `address` is required.') {
                                        chuoi_error += 'Địa chỉ không được để trống.<br>';
                                    }
                                }

                                if (JSON.parse(err).error.errors.price != undefined) {
                                    if (JSON.parse(err).error.errors.price.message == 'Path `price` is required.') {
                                        chuoi_error += 'Giá không được để trống.<br>';
                                    } else if (JSON.parse(err).error.errors.price.message == `Cast to Number failed for value "${priceId.value}" at path "price"`) {
                                        chuoi_error += 'Giá phải là một con số.<br>';
                                    }
                                }
                            } else {
                                if (JSON.parse(err).error == 'Wrong file format')
                                    chuoi_error += 'Sai định dạng hình ảnh.<br>';
                            }

                            showMessageError(chuoi_error);
                        });
                })
                .catch(err => {
                    console.log(err);
                    if (JSON.parse(err).error.message != undefined)
                        messageError(JSON.parse(err).error.message);
                    else if (JSON.parse(err).message != undefined)
                        messageError(JSON.parse(err).message);
                    else
                        messageError(err);
                });
        }

    }  // End Create
    else {    // Update

    }   // End update

    huy.onclick = () => {
        window.location = Dia_chi_Dich_vu + '/admin/producer';
    }

    function showProducerUpdate(idProducer) {
        return new Promise((resolve, reject) => {
            getProducerAPI(sessionStorage.getItem('token'), idProducer)
                .then(result => {
                    titleId.value = result.producer.title;
                    filterCategoryId.value = result.producer.category._id;
                    //filterClassifyId.value = result.producer.classify._id;
                    createdAtId.innerHTML = 'Ngày tham gia: ' + getDateFormat(result.producer.created_at);
                    updatedAtId.innerHTML = 'Chỉnh sửa gần đây nhất: ' + getDateFormat(result.producer.updated_at);
                    noteId.value = result.producer.note == undefined ? "" : result.producer.note;
                    imageId.src = `${Dia_chi_Dich_vu}/${result.producer.image}`;
                    imageModalId.src = imageId.src;
                    resolve(result);
                })
                .catch(err => {
                    reject(0);
                    messageError(err);
                });
        });

    }

    function showMessageError(message) {
        errorMessageId.innerHTML = message;
        errorMessageId.classList.add('errorMessage');
        errorMessageId.classList.remove('successMessage');
    }

    function showMessageSuccess(message) {
        errorMessageId.innerHTML = message;
        errorMessageId.classList.add('successMessage');
        errorMessageId.classList.remove('errorMessage');
    }

    function hiddenMessageError() {
        errorMessageId.innerHTML = ``;
        errorMessageId.classList.remove('errorMessage');
        errorMessageId.classList.remove('successMessage');
    }



    function getAllCategory() {
        return new Promise((resolve, reject) => {
            getAllCategoriesAPI()
                .then(listCategories => {
                    if (listCategories.count > 0) {
                        listCategories.categories.forEach(category => {
                            filterCategoryId.innerHTML += `<option value="${category.id}">${category.title}</option>`
                        });
                        resolve(3);
                    } else {
                        filterCategoryId.innerHTML += `<option value="">Không có chuyên mục nào</option>`
                        filterCategoryId.disabled = true;
                    }

                })
                .catch(err => {
                    reject(0);
                    messageError(err);
                });
        });
    }

    function getClassifiesByCategory(CategoryId) {
        return new Promise((resolve, reject) => {
            getClassifiesByCategoryAPI(CategoryId)
                .then(listClassifies => {
                    filterClassifyId.innerHTML = ``;
                    filterClassifyId.disabled = false;
                    if (listClassifies.count > 0) {
                        listClassifies.classifies.forEach(classify => {
                            filterClassifyId.innerHTML += `<option value="${classify.id}">${classify.title}</option>`
                        })
                        resolve(1);
                    } else {
                        filterClassifyId.innerHTML = `<option value="">Không có thể loại nào trong chuyên mục này</option>`
                        filterClassifyId.disabled = true;
                        resolve(1);
                    }
                }).catch(err => {
                    reject(0);
                    console.log(err)
                    //messageError(err);
                });
        });
    }

    function getProducersByClassify(ClassifyId) {
        return new Promise((resolve, reject) => {
            getProducersByClassifyAPI(ClassifyId)
                .then(listProducers => {
                    filterProducerId.innerHTML = ``;
                    filterProducerId.disabled = false;
                    if (listProducers.count > 0) {
                        listProducers.producers.forEach(producer => {
                            filterProducerId.innerHTML += `<option value="${producer.id}">${producer.title}</option>`
                        })
                        resolve(1);
                    } else {
                        filterProducerId.innerHTML = `<option value="">Không có nhà sản xuất nào trong thể loại này</option>`
                        filterProducerId.disabled = true;
                        resolve(1);
                    }
                }).catch(err => {
                    if (err == 'Unauthorized') {
                        filterProducerId.innerHTML = `<option value="">Không có nhà sản xuất nào trong thể loại này</option>`
                        filterProducerId.disabled = true;
                    }
                    reject(0);
                });
        });
    }

    async function showImageSelect(listImage) {
        showImageSelectedId.innerHTML = ``;
        var chuoi_HTML = `<div>`;
        for (var i = 0; i < listImage.length; i++) {
            chuoi_HTML += `
                    <img style="border: 1px solid gray;" id="image${i}" src="${await getBase64(listImage[i])}" width="100" height="100">
                    <button onclick="deleteImageShow(${i})" style="margin-top: -98px; margin-left: -25px; border: 1px solid; border-radius: 50%;" type="button" class="btn btn-dark btn-sm">
                        <i class="fa fa-times"></i>
                    </button>`
        }
        chuoi_HTML += `</div>`
        showImageSelectedId.innerHTML += chuoi_HTML;
    }

    function deleteImageShow(posImage) {
        listImageSelected.splice(posImage, 1)
        showImageSelect(listImageSelected)
    }

    $(document).ready(function () {
        $('#luu').click(function () {
            $("html, body").animate({ scrollTop: 0 }, 600);
            return false;
        });
    });
</script>