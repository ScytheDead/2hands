<div class="w3ls-header">
	<!--header-one-->
	<div class="w3ls-header-left">
		<p><a href="mobileapp.html"><i class="fa fa-download" aria-hidden="true"></i>Tải phiên bản dành cho di dộng </a>
		</p>
	</div>

	<div class="w3ls-header-right">
		<ul>
			<li class="dropdown head-dpdn" id="dropdownHeaderMessageId">

			</li>

			<li class="dropdown head-dpdn" id="dropdownHeader">
				<a id="iconLoginId" href="/login" aria-expanded="false"><i class="fa fa-user" aria-hidden="true"></i>
					Đăng nhập</a>
			</li>
			<li class="dropdown head-dpdn">
				<a href="help.html"><i class="fa fa-question-circle" aria-hidden="true"></i> Hỗ trợ</a>
			</li>
			<li class="dropdown head-dpdn">
				<a href="#"><span class="active uls-trigger"><i class="fa fa-language" aria-hidden="true"></i>Ngôn
						ngữ</span></a>
			</li>
		</ul>
	</div>

	<div class="clearfix"> </div>

	<div id="toast"></div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
	const socket = io(Dia_chi_Dich_vu);

	if (sessionStorage.getItem('token') != null) {
		var user = decodedJWT(sessionStorage.getItem('token'));
		getUser();
	}

	socket.on('server-send-message', messageChatAndNameUser => {
		//console.log(messageChatAndNameUser);
		if (sessionStorage.getItem('token') != null) {
			getUser();
		}
	});

	socket.on('server-send-new-message', userId => {
		if (sessionStorage.getItem('token') != null) {
			if (user.id == userId) {
				getUser();
			}
		}
	});

	function showMessagesNotification(user) {
		//joinRoomChat(user.user);

		var count = 0;
		user.messages.forEach(message => {
			if (user._id.toString() === message.userSell.toString()) {
				message.contentChatUserBuy.forEach(contentMessage => {
					if (contentMessage.seen == false) {
						count++;
					}
				});
			} else {
				message.contentChatUserSell.forEach(contentMessage => {
					if (contentMessage.seen == false) {
						count++;
					}
				});
			}
		});
		var chuoi_HTMLConDropDown = ` <a id="messageId" href="/message" aria-expanded="false"><i class="fa fa-comments-o"></i><span id="countNotificationId" style="color: red; font-weight:bold">${count == 0 ? `` : count}</span> Chat </a>`
		dropdownHeaderMessageId.innerHTML = chuoi_HTMLConDropDown;
	}

	async function getUser() {
		getUserAPI(sessionStorage.getItem('token'), user.id)
			.then(user => {
				let chuoiDropDown = showDropDown(user.user);
				dropdownHeader.innerHTML = chuoiDropDown;

				let url = window.location.pathname;
				if (url == '/user' || url == '/posts') {
					btnName.childNodes[1].className = ``;
					btnName.classList.add('btn-lg');
				} else if (url.indexOf('/message/') != -1) {
					btnName.childNodes[1].className = ``;
				}

				sendEventClientConnectToServer(user.user)
				showMessagesNotification(user.user);
				//joinRoomChat(user.user);

			})
			.catch(err => {
				console.log(err);
				if (err == 'Unauthorized') {
					sessionStorage.removeItem('token');
					window.location = Dia_chi_Dich_vu;
				}
			});
	}

	function sendEventClientConnectToServer(user) {
		let listMessageId = user.messages.map(message => message._id);
		console.log(listMessageId);
		let data = {
			userId: user._id,
			listMessagesId: listMessageId
		}
		socket.emit('client-currently-logged', data);
	}
</script>